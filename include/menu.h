/**
 * @file menu.h
 * @brief Главное меню управления архивом жильцов
 * @version 1.0
 * @date [текущая дата]
 *
 * @details
 * ============================================================================
 * Модуль реализует интерактивное консольное меню для системы управления архивом
 * жильцов. Поддерживает два формата данных (input.txt - полный, kodif.txt -
 * сокращенный) и предоставляет полный набор операций CRUD (Create, Read, Update,
 * Delete) для работы с архивом.
 *
 * Архитектура системы:
 * 1. Данные хранятся в стеке (структура Stack)
 * 2. Поддерживается контроль формата (ArchiveFormat)
 * 3. Все изменения автоматически сохраняются в archive.bin
 * 4. Реализована защита от некорректных операций
 *
 * @section features_sec Основные функции
 * - Загрузка данных из разных форматов
 * - Просмотр архива
 * - Добавление новых записей
 * - Анализ данных
 * - Сервисные операции
 *
 * @subsection data_subsec Форматы данных
 * - input.txt: Полные данные (7 полей)
 * - kodif.txt: Сокращенные данные (4 поля)
 *
 * @note Для корректной работы требуется:
 * - Наличие папки data/ с файлами input.txt и kodif.txt
 * - Права на запись в текущей директории
 * ============================================================================
 */

#pragma once
#include "base.h"

 /**
  * @brief Главная функция меню управления архивом
  *
  * @full_description
  * Реализует интерактивное консольное меню с обработкой всех пользовательских
  * команд. Обеспечивает полный цикл работы с архивом жильцов:
  *
  * 1. # Инициализация системы
  *    - Создание пустого стека
  *    - Установка флага формата (NONE)
  *
  * 2. # Основной цикл
  *    - Отображение меню
  *    - Обработка ввода
  *    - Валидация данных
  *    - Выполнение операций
  *
  * 3. # Доступные операции
  *    - Просмотр (1): Вывод данных в консоль
  *      * Подменю выбора формата отображения
  *      * Контроль соответствия формата данных
  *
  *    - Загрузка (2): Чтение из файлов
  *      * Автоматическое определение формата
  *      * Загрузка в стек
  *      * Установка флага формата
  *
  *    - Добавление (3): Создание новых записей
  *      * Проверка загруженного формата
  *      * Интерактивный ввод данных
  *      * Автосохранение
  *
  *    - Анализ (4): Статистические операции
  *      * Только для полного формата
  *      * Поиск избыточной площади
  *      * Топ-3 минимальных площадей
  *
  *    - Утилиты (5): Сервисные функции
  *      * Очистка архива
  *      * Сортировка (метод Шелла)
  *      * Удаление файла архива
  *
  * 4. # Защита и валидация
  *    - Контроль диапазона ввода (0-5)
  *    - Проверка формата при операциях
  *    - Защита от переполнения буфера
  *    - Обработка ошибок ввода/вывода
  *
  * 5. # Завершение работы
  *    - Автоматическая очистка памяти
  *    - Сохранение последнего состояния
  *
  * @flowchart
  * [Инициализация]->[Показать меню]->[Ввод команды]
  * ->[Валидация]->[Выполнение]->[Сохранение]->[Повтор или выход]
  *
  * @example Пример использования:
  * @code
  * int main() {
  *     mainMenu(); // Запуск системы
  *     return 0;
  * }
  * @endcode
  *
  * @warning Важные ограничения:
  * - Нельзя смешивать форматы данных
  * - Анализ доступен только для полного формата
  * - Требуется ручное создание папки data/
  *
  * @see base.h Для структур данных и базовых функций
  * @see analysis.h Для модуля аналитики
  * @see archive.h Для операций с файлами
  */
void mainMenu();

/* Детали реализации (для разработчиков) */
/**
 * @internal
 *
 * @struct Локальные переменные:
 * - Stack archive: контейнер данных
 * - ArchiveFormat currentFormat: текущий формат
 * - int choice, subChoice: переменные меню
 * - int inputResult: статус ввода
 * - char inputBuffer[100]: буфер ввода
 *
 * @algorithm Основная логика:
 * 1. Инициализация стека (initStack)
 * 2. Бесконечный цикл с условием выхода
 * 3. Отображение ASCII-меню через printf
 * 4. Безопасный ввод через fgets+sscanf
 * 5. Switch-case для обработки команд:
 *    - case 1: Подменю просмотра
 *    - case 2: Подменю загрузки
 *    - case 3: Подменю добавления
 *    - case 4: Подменю анализа
 *    - case 5: Подменю утилит
 *    - case 0: Выход с очисткой
 * 6. Для каждого подменю - аналогичная
 *    обработка ввода
 *
 * @security Особенности защиты:
 * - Все строковые операции используют fgets
 * - Проверка результатов sscanf
 * - Контроль границ значений
 * - Запрет смешанных форматов
 *
 * @persistence Автосохранение:
 * - После каждой модификации данных
 * - В бинарный файл archive.bin
 * - Формат соответствует текущему типу
 */